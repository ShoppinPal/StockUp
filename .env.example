# AWS account credentials
AWS_ACCESS_KEY_ID=stockup
AWS_SECRET_ACCESS_KEY=stockup.123

##
# A seed file contains information to populate the database. It contains:
# - roles, usernames, passwords
# - integration tokens gained via a successful oauth handshake,
#   used to communicate with a point-of-sale (Vend) on behalf of retailers
# - suppliers, outlets
# - anything and everything which we cannot add via a UI for onboarding warehouse users
##

# location of the seed file
AWS_BUCKET=stockup
AWS_DEFAULT_REGION=us-west-2
AWS_KEY=shoppinpal.123

AWS_SES_REGION=us-west-2

AWS_S3_REGION=us-west-2
AWS_S3_CSV_REPORTS_BUCKET=stockup
AWS_S3_REORDER_POINTS_MULTIPLIERS_BUCKET=


##
# Warehouse sends jobs/payloads to a queue so that a worker may pick them up and finish them off.
# There are many technologies that can provide a queue implementation: SQS, RabbitMQ, redis, etc.
##

# location of the queue and credentials to access it
AWS_SQS_ACCESS_KEY_ID=stockup
AWS_SQS_REGION=us-west-2
AWS_SQS_SECRET_ACCESS_KEY=stockup
AWS_SQS_URL=http://sqs.us-west-2.goaws:4100/100010001000/local-queue1 
AWS_SQS_URL_2=http://sqs.us-west-2.goaws:4100/100010001000/local-queue2 



##
# Each worker takes care of a different task.
# Sometimes workers are renamed, so in order to avoid code changes,
# those worker names can be configured here, instead.
##

# DO NOT TOUCH - unless you are a developer
GENERATE_STOCK_ORDER_WORKER=generateStockOrderSeriallyWithPaging
GENERATE_SALES=generateSales
IMPORT_STOCK_ORDER_TO_POS=addProductsToVendConsignment
IMPORT_STOCK_ORDER_TO_WAREHOUSE=importStockOrderUsingCache
IMPORT_STOCK_ORDER_TO_WAREHOUSE_WITHOUT_SUPPLIER=importStockOrderUsingCacheWithoutSupplier
REMOVE_UNFULFILLED_PRODUCTS_WORKER=removeUnfulfilledProductsFromStockOrder
REMOVE_UNRECEIVED_PRODUCTS_WORKER=removeUnreceivedProductsFromStockOrder
STOCK_ORDER_WORKER=generateStockOrder
FIND_DIFFERENTIAL_VEND_DATA_WORKER=findDifferentialVendData

# valid values are local or staging or production
NODE_ENV=local

# TODO: explain
SCHEME=http

##
# Whomever is running warehouse, needs to be identified as a unique player by the point-of-sale (Vend)
# To get these, you can:
# - Register as a developer or Sign In: https://developers.vendhq.com/
# - View or Add Application
#   - https://developers.vendhq.com/developer/applications
##

# your identification credentials given by Vend
VEND_CLIENT_ID=AMv6StIqpdXIDhMkkIgZuhDVCxlMMcKx
VEND_CLIENT_SECRET=TSNlaqRfL1SK5CGuyAi13UNGnZ5tB6U2
VEND_AUTHORIZATION_URL=https://secure.vendhq.com/connect


##
# MS Dynamics 365 oAuth variables
# https://docs.microsoft.com/en-gb/azure/active-directory/develop/v1-protocols-oauth-code
# Remember to replace
##
MSDYNAMICS_AUTHORIZATION_URL=
MSDYNAMICS_TOKEN_URL=
MSDYNAMICS_CLIENT_ID=
MSDYNAMICS_CLIENT_SECRET=
MSDYNAMICS_RESOURCE_URL=
##
# To accommodate redirects, the code needs to know the external facing URL (FQDN or IP)
##
VM_EXTERNAL_IP=lb

##
# Warehouse has evolved over time to work with different Queue and Worker infrastructures:
# - IronWorker by iron.io
# - SQS by Amazon Web Services
#
# It moved across various solutions due trade-offs between:
# - cost/resources
# - stability
# - high or low devops involvement
# - ease-of-support
##

# DO NOT TOUCH - unless you are a developer
WORKER_TYPE=AWS


MONGOLAB_URL=mongodb://db:27017/warehouse-local
MONGOLAB_URI=mongodb://db:27017/warehouse-local
SP_PRETTY_PRINT=true
VERIFICATION_EMAIL=


MSSQL_USER=sa
MSSQL_PASSWORD=Abc@138#safj
MSSQL_SERVER=mssql

NOTIFICATION_HOST=lb
#NOTIFICATION_PORT=
NOTIFICATION_PROTOCOL=http
NOTIFICATION_PATH=notification/publish


#SLACK_NOTIFICATION_URL=

#MINIO ENDPOINT 
S3_ENDPOINT=http://minio.stockup.localdomain:9000